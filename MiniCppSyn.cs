// MiniCppSyn.cs                                              HDO, 2006-08-28
// -------------
// Table-driven top-down syntax analyzer (G-code interpreter).
// Generated by Coco-2 (PGT).
//=====================================|========================================

// --- call pragma mehts. and exec. sem. acts. after syntax errors? ---
#define CONTPRAGMAACTS            // !!!must be defined for SG and PGT!!! 
#undef  CONTSEMACTS               // should not be defined 

using System;
using System.Text;

using Lex = MiniCppLex;
using Sem = MiniCppSem;

public class MiniCppSyn {
                   
  public static String MODULENAME = "MiniCppSyn";

  // --- G-code instructions ---
  public enum Instruction {
    T, TA, TC, TCA, NT, NTA, ANY, ANYA, EPS, EPSA, JMP, RET
  } // Instruction

  private const int ROOTPC     =  923;
  private const int LASTTERM   =   52;
  private const int LASTPRAGMA =   52;


  // --- other constants ---
  private const int MINERRDIST   =   3;
  private const int MAXSTACKLEN  = 100;
  private const int EOFTOK       =   0;
  private const int FIRSTNONTERM = LASTPRAGMA + 1;

  public class NTData {
    public int          startPC;
    public bool         del;
    public Sets.Set256  firstSet;
    public NTData(int startPC, bool del, Sets.Set256 firstSet) {
      this.startPC  = startPC;
      this.del      = del;
      this.firstSet = firstSet;
    } // NTData
  } // NTData
  
  private class GrammarTable {
    public int[]  header = {
      928, 52, 52, 82, 19, 0
    };
    public byte[] code = {
        13,   5,   1,  10,   0,   2,  10,   2,   0,   5,   3,  18,   0,   3,
        10,   2,   0,   8,   1,  16,  11,   0,   4,   4,   7,   1,   2,  49,
         2,  15,   4,   2,   4,   0,  47,  11,   0,  46,   1,  10,  48,   0,
        13,   8,   2,  18,  11,   1,  15,  56,   0,  14,  10,  44,   0,   1,
        21,  67,   0,   2,  50,   4,  17,  10,  44,   0,   1,  22,  60,   0,
        15,  10,  60,   0,   4,   7,   1,   1,  23,  83,   0,  14,   2,  49,
         3,   9,   3,  95,   0,  16,   4,   5,   5,  11,   8,   4,  18,   0,
        28,   5,   6, 105,   0,   7,   0,  29,   9,   5, 115,   0,  20,   0,
        47,  11,   8,   6,  21,   4,   8,  10,  23,  11,   4,   7,   1,   1,
        23, 131,   0,  14,   2,  49,   3,  16,   4,   5,   5,  11,   5,   2,
       145,   0,   1,  14,   8,   2,  15,   1,  45, 173,   0,   1,  23, 157,
         0,  16,   2,  49,   5,  18,   5,   2, 167,   0,   7,  20,   8,   2,
        21,  10, 148,   0,   8,   5,  22,   0,  47,  11,   4,   7,   1,   9,
         7, 188,   0,  14,  11,   1,  23, 193,   0,  15,   2,  49,   4,   1,
        30, 203,   0,   0,  31,  17,   8,   8,  18,   1,  45, 234,   0,   4,
         7,   7,   1,  23, 218,   0,  20,   2,  49,   9,   1,  30, 228,   0,
         0,  31,  22,   8,   8,  23,  10, 206,   0,   8,   7,  11,   1,  16,
       243,   0,  13,  11,   1,   1, 249,   0,  14,  11,   0,  12,  15,  11,
         0,  32,   5,   1,   8,   1,   1,  16,  10, 255,   0,   5,   4,  16,
         1,   2,  10,   4,   1,   5,   9,  24,   1,   3,  10,   4,   1,   8,
         9,  17,   0,  33,  11,   5,  10,  36,   1,   1,  11,   5,  12,  42,
         1,   2,  11,   5,  13,  48,   1,   3,  11,   5,  19,  54,   1,   4,
        11,   5,  14,  60,   1,   5,  11,   5,  15,  66,   1,   6,  11,   5,
        16,  72,   1,   7,  11,   5,  17,  78,   1,   8,  11,   5,  18,  84,
         1,   9,  11,   9,   6,  94,   1,  22,   4,   8,  11,  24,  11,   0,
        47,  25,  11,   2,  49,   1,  14,   1,  26, 110,   1,  15,   0,  47,
        11,   1,  27, 118,   1,  16,  10, 107,   1,   9,  10, 133,   1,  17,
         0,  46,  21,   4,  22,  10,  23,  10, 107,   1,   1,  30, 147,   1,
        18,   4,  22,   7,   0,  31,  20,  10, 123,   1,   0,  28,  24,   5,
        11, 155,   1,  13,   0,  29,  26,  10, 107,   1,   4,  22,   1,  14,
         1,  45, 176,   1,   4,  22,   3,  16,  10, 165,   1,   8,   7,  11,
         0,  11,  13,   0,  28,   4,  22,   2,   0,  29,   4,   9,   3,   1,
         8, 199,   1,   4,   9,   4,   8,  11,  17,  11,   0,  17,  13,   0,
        28,   4,  22,   2,   0,  29,  15,   4,   9,   4,  17,  11,   0,   2,
        13,   0,  47,  11,   0,   3,  13,   0,  44,   2,  49,   2,  15,   0,
        47,  11,   0,   5,  13,   0,  43,   5,  22,  26,   2,   2,  15,   1,
        43,  20,   2,   5,  22,   5,   2,   7,  20,  10, 248,   1,   3,  51,
        14,   2,   9,  22,  10, 248,   1,   0,   9,  23,  10, 248,   1,   8,
         5,  24,   0,  47,  11,   3,  51,  35,   2,   4,  17,  10, 248,   1,
         0,   9,  18,  10, 248,   1,   0,   6,  13,   0,  30,   0,  31,   2,
        49,   2,  15,   0,  47,  11,   0,  14,  13,   5,  22,  63,   2,   2,
         8,   5,  15,   0,  47,  11,   0,  18,  13,   0,  28,   4,  22,   2,
         0,  29,  15,   0,  32,   5,  20,  91,   2,   4,  17,  10,  82,   2,
         5,  21,  96,   2,   6,   0,  33,  19,  11,   0,  19,  13,   2,  50,
         2,   0,  48,   5,   9, 117,   2,   3,  16,  10, 108,   2,   8,  12,
        17,  11,   0,  20,   0,  48,   4,   9,   1,  14,   5,   9, 138,   2,
         3,  16,  10, 129,   2,   8,   9,  11,   4,  23,   1,  11,   4,  24,
         1,  14,   1,  35, 161,   2,  15,   4,  24,   4,  17,  10, 149,   2,
         8,  13,  11,   4,  25,   1,  14,   1,  36, 180,   2,  15,   4,  25,
         4,  17,  10, 168,   2,   8,  14,  11,   4,  26,   1,  14,   1,  37,
       197,   2,  15,   4,  26,   9,  22,  11,   1,  38, 205,   2,  16,  10,
       192,   2,   1,  39, 213,   2,  17,  10, 192,   2,   1,  40, 221,   2,
        18,  10, 192,   2,   1,  41, 229,   2,  19,  10, 192,   2,   1,  42,
       237,   2,  20,  10, 192,   2,   8,  15,  11,   1,  21,  16,   3,  13,
         4,  27,   3,  16,   1,  21,   5,   3,  17,   4,  27,   7,  20,  10,
       249,   2,   1,  22,  13,   3,  18,  10, 254,   2,   8,  16,  11,   1,
        22, 245,   2,  14,  10, 245,   2,   4,  28,   1,  14,   1,  23,  40,
         3,  15,   4,  28,   6,  19,  10,  28,   3,   1,  24,  48,   3,  16,
        10,  33,   3,   1,  25,  56,   3,  17,  10,  33,   3,   8,  17,  11,
         1,  34,  64,   3,  13,   4,  29,   2,  15,  11,   1,  10,  75,   3,
        13,  11,   1,  15,  81,   3,  14,  11,   3,  50,  88,   3,   3,  16,
        11,   3,  49, 129,   3,   5,  18,   9,  18, 100,   3,  19,  11,   9,
        19, 115,   3,  20,   0,  30,  21,   4,  22,  10,   0,  31,  23,  11,
         8,   4,  24,   0,  28,   5,  11, 125,   3,  13,   0,  29,  26,  11,
         1,  13, 146,   3,  27,   4,   7,  16,   0,  30,   4,  22,  17,   0,
        31,  30,  11,   0,  28,   4,  22,  19,  32,   0,  29,  11,   4,   0,
         1,   0,   0,  11
    };
    public NTData[] nts = {
      new NTData(   1, true , new Sets.Set256(0x1012, 0x0001)),
      new NTData(  22, false, new Sets.Set256(0x0010)),
      new NTData(  37, false, new Sets.Set256(0x0000, 0x0000, 0x4000)),
      new NTData(  75, false, new Sets.Set256(0x1002, 0x0001)),
      new NTData( 123, false, new Sets.Set256(0x1002, 0x0001)),
      new NTData( 139, false, new Sets.Set256(0x0000, 0x0000, 0xe000)),
      new NTData( 179, false, new Sets.Set256(0x1002, 0x0001)),
      new NTData( 237, false, new Sets.Set256(0x1002, 0x0001)),
      new NTData( 253, false, new Sets.Set256(0x0000, 0x0000, 0x0001)),
      new NTData( 286, false, new Sets.Set256(0x486c, 0x0006, 0x8001, 0x0002)),
      new NTData( 354, false, new Sets.Set256(0x0000, 0x0000, 0x0000, 0x0002)),
      new NTData( 417, false, new Sets.Set256(0xa400, 0x1060, 0x0004, 0x0006)),
      new NTData( 435, false, new Sets.Set256(0x0800)),
      new NTData( 459, false, new Sets.Set256(0x0000, 0x0002)),
      new NTData( 475, false, new Sets.Set256(0x0004)),
      new NTData( 481, false, new Sets.Set256(0x0008)),
      new NTData( 493, false, new Sets.Set256(0x0020)),
      new NTData( 553, false, new Sets.Set256(0x0040)),
      new NTData( 567, false, new Sets.Set256(0x4000)),
      new NTData( 581, false, new Sets.Set256(0x0000, 0x0004)),
      new NTData( 612, false, new Sets.Set256(0x0000, 0x0008)),
      new NTData( 633, false, new Sets.Set256(0x0000, 0x0010)),
      new NTData( 653, false, new Sets.Set256(0xa400, 0x1060, 0x0004, 0x0006)),
      new NTData( 657, false, new Sets.Set256(0xa400, 0x1060, 0x0004, 0x0006)),
      new NTData( 676, false, new Sets.Set256(0xa400, 0x1060, 0x0004, 0x0006)),
      new NTData( 695, false, new Sets.Set256(0xa400, 0x1060, 0x0004, 0x0006)),
      new NTData( 752, false, new Sets.Set256(0xa400, 0x1060, 0x0004, 0x0006)),
      new NTData( 792, false, new Sets.Set256(0xa400, 0x1000, 0x0004, 0x0006)),
      new NTData( 827, false, new Sets.Set256(0xa400, 0x1000, 0x0004, 0x0006)),
      new NTData( 837, false, new Sets.Set256(0xa400, 0x1000, 0x0000, 0x0006))
    };
    public Sets.Set256[] epsSets = {
      new Sets.Set256(0x0001),
      new Sets.Set256(0x0000, 0x0000, 0xa000),
      new Sets.Set256(0x0000, 0x0000, 0xe000),
      new Sets.Set256(0x0000, 0x1000),
      new Sets.Set256(0x0000, 0x0000, 0x8000),
      new Sets.Set256(0x0000, 0x0000, 0x0001),
      new Sets.Set256(0x0000, 0x2000),
      new Sets.Set256(0x0000, 0x2000, 0x2000),
      new Sets.Set256(0x0000, 0x0000, 0x0002),
      new Sets.Set256(0x0000, 0x0000, 0x4000),
      new Sets.Set256(0x597e, 0x001f, 0x8003, 0x0002),
      new Sets.Set256(0x0000, 0x0018, 0x0002),
      new Sets.Set256(0x0000, 0xa000, 0xa800),
      new Sets.Set256(0x0000, 0xa000, 0xa808),
      new Sets.Set256(0x0000, 0xa000, 0xa818),
      new Sets.Set256(0x0000, 0xa000, 0xaff8),
      new Sets.Set256(0x0000, 0xa060, 0xaff8),
      new Sets.Set256(0x0000, 0xa3e0, 0xaff8),
      new Sets.Set256(0x0000, 0x4000)
    };
    public Sets.Set256[] anySets = {
      new Sets.Set256(0x0000)
    };
    public String[] names = {
      "end of file", "bool", "break", "cin", "const", "cout", "delete",
      "double", "else", "endl", "false", "if", "int", "new", "return",
      "true", "void", "while", "switch", "case", "default", "+", "-", "*",
      "/", "%", "++", "--", "(", ")", "[", "]", "{", "}", "!", "||", "&&",
      "==", "!=", "<", "<=", ">", ">=", "<<", ">>", ",", "=", ";", ":",
      "ident", "number", "string", "dblNumber", "MiniCpp", "ConstDecl",
      "Init", "VarDefOrFuncDeclOrDef", "VarDef", "VarDefRest",
      "FormParList", "Type", "Block", "Stat", "IncDecAssignOrCallStat",
      "ActParList", "IfStat", "WhileStat", "BreakStat", "InputStat",
      "OutputStat", "DeleteStat", "ReturnStat", "SwitchStat", "CaseStat",
      "DefaultPart", "Expr", "OrExpr", "AndExpr", "RelExpr", "SimpleExpr",
      "Term", "NotFact", "Fact"
    };
  } // GrammarTable;

  private static GrammarTable gt;

  private static int   pc;             // G-code counter
  private static int[] stk;            // stack of G-code return adresses
  private static int   sp;             // stack pointer
  private static bool  mustRead;       // next Lex.token to read
  private static int   altRoot;        // root of alternative chain
  private static bool  leaveOrEnter;   // leaveCnt > 0 OR enterCnt > 0
  private static int   leaveCnt;       // nr. of sem. proc. to leave
  private static int   enterCnt;       // nr. of sem. proc. to enter
  private static int   errDist;        // current error distance
  private static int[] stkAtErr;       // saved stack at error position
  private static int[] newSP;          // new stack length
  private static int[] newPC;          // pc after recovery


  public static void MiniCppSynMethod(Utils.ModuleAction action, out String moduleName) {
  //-----------------------------------|----------------------------------------
    moduleName = MODULENAME;
    switch (action) {
      case Utils.ModuleAction.getModuleName:
        return;
      case Utils.ModuleAction.initModule:
        Errors.InstallStopParsingMethod(StopParsing);
        gt       = new GrammarTable();
        stk      = new int[MAXSTACKLEN];
        stkAtErr = new int[MAXSTACKLEN];
        newSP    = new int[LASTTERM + 1];
        newPC    = new int[LASTTERM + 1];
        break;
      case Utils.ModuleAction.resetModule:
        break;
      case Utils.ModuleAction.cleanupModule:
        gt       = null;
        stk      = null;
        stkAtErr = null;
        newSP    = null;
        newPC    = null;
        break;
    } // switch
  } // MiniCppSynMethod

  private static void Push(int pc) {
    if (sp < MAXSTACKLEN)
      stk[sp++] = pc;
    else
      Errors.Restriction(MODULENAME, "Push", "parser stack overflow");
  } // Push

  private static int Pop() {
    if (sp > 0)
      return stk[--sp];
    else {
      Errors.CompilerError(MODULENAME, "Pop", "parser stack underflow");
      return 0;
    } // else
  } // Pop

  private static void GetNextToken() {
    for (;;) {
      Lex.GetToken(); // updates Lex.token
      if (Lex.token <= LASTTERM)
        return;
  #if !CONTPRAGMAACTS
      if (NumOfSynErrors() == 0)
  #endif
        Sem.pragmaMethods[Lex.token - LASTTERM - 1]();
    } // for
  } // GetNextToken

  private static int AdrAt(int pc) {
    return (gt.code[pc - 1] |
           (gt.code[pc    ] << 8));
  } // AdrAt

  private static void AdjustPC(ref int pc) {
    if (pc == 0)
      return;
    for (;;)
      switch ((Instruction)gt.code[pc - 1]) {
        case Instruction.T:
        case Instruction.TA:
        case Instruction.TC:
        case Instruction.TCA:
        case Instruction.NT:
        case Instruction.NTA:
        case Instruction.ANY:
        case Instruction.ANYA:
        case Instruction.EPS:
        case Instruction.EPSA:
          return;
        case Instruction.JMP:
          pc = AdrAt(pc + 1);
          break;
        case Instruction.RET:
          pc = 0;
          return;
        default:
          pc++; // syn. or sem. action
          break;
      } // switch
  } // AdjustPC

  private static void GetSymInstr(int pc, 
                        out int opcode, out int sy, out int nextPC, out int altPC) {
    opcode = gt.code[pc - 1];
    nextPC = 0; // dummy init
    altPC  = 0; // dummy init 
    switch ((Instruction)opcode) {
      case Instruction.T:
      case Instruction.TA:
      case Instruction.TC:
      case Instruction.TCA:
      case Instruction.ANYA:
      case Instruction.EPS:
      case Instruction.EPSA:
        sy = gt.code[pc];
        break;
      case Instruction.NT:
      case Instruction.NTA:
        sy = gt.code[pc] + FIRSTNONTERM;
        break;
      default: // ANY, JMP, RET, SEM, SYN 
        sy = 0;
        break;
    } // switch
    switch ((Instruction)opcode) {
      case Instruction.T:
      case Instruction.EPS:
        nextPC = pc + 2;
        altPC = 0;
        break;
      case Instruction.TC:
      case Instruction.NT:
        nextPC = pc + 3;
        altPC = 0;
        break;
      case Instruction.TA:
      case Instruction.ANYA:
      case Instruction.EPSA:
        nextPC = pc + 4;
        altPC = AdrAt(pc + 2);
        break;
      case Instruction.TCA:
      case Instruction.NTA:
        nextPC = pc + 5;
        altPC = AdrAt(pc + 2);
        break;
      case Instruction.ANY:
        nextPC = pc + 1;
        altPC = 0;
        break;
    } // switch
    AdjustPC(ref nextPC);
    AdjustPC(ref altPC);
  } // GetSymInstr

  private static void Fill(int pc, int sp) {
    int opcode, sy, nextPC, altPC, i;
    AdjustPC(ref pc);
    while (pc > 0) {
      GetSymInstr(pc, out opcode, out sy, out nextPC, out altPC);
      switch ((Instruction)opcode) {
        case Instruction.T:
        case Instruction.TA:
        case Instruction.TC:
        case Instruction.TCA:
          newPC[sy] = pc;
          newSP[sy] = sp;
          break;
        case Instruction.NT:
        case Instruction.NTA:
          for (i = 0; i <= LASTTERM; i++)
            if (Sets.member((ushort)i, gt.nts[sy - FIRSTNONTERM].firstSet)) {
              newPC[i] = pc;
              newSP[i] = sp;
            }
          if (gt.nts[sy - FIRSTNONTERM].del)
            Fill(nextPC, sp);
          break;
        case Instruction.EPS:
        case Instruction.EPSA:
          Fill(nextPC, sp);
          break;
      } // switch
      pc = altPC;
    } // while
  } // Fill

  private static void FillSucc(int pc, int sp) {
    int opcode, sy, nextPC, altPC;
    AdjustPC(ref pc);
    while (pc > 0) {
      GetSymInstr(pc, out opcode, out sy, out nextPC, out altPC);
      if (nextPC > 0)
        Fill(nextPC, sp);
      pc = altPC;
    } // while
  } // FillSucc

  private static void Triple(int altRoot) {
    for (int i = 0; i <= LASTTERM; i++) { // clear triple list
      newPC[i] = 0;
      newSP[i] = 0;
    } // for
    for (int i = 1; i <= sp; i++) {       // successors of stacked nt's
      FillSucc(stk[i - 1], i - 1);
      Fill(stk[i - 1], i - 1);
    } // for
    FillSucc(altRoot, sp);                // successors of alt. chain
    Fill(altRoot, sp);                    // current alt. chain
  } // Triple

  private static void HandleSynErr(ref int pc, ref int altRoot) {
    int     opcode, sy, nextPC, altPC, adjPC, nwSP, eq;
    bool    nameInMsg;
    String  name;
    StringBuilder msg = new StringBuilder();
    leaveOrEnter = false;
    if (errDist >= MINERRDIST) { // --- primary error
      nameInMsg = false;
      adjPC = altRoot;
      AdjustPC(ref adjPC);
      while (adjPC > 0) {
        GetSymInstr(adjPC, out opcode, out sy, out nextPC, out altPC);
        if ( (Instruction)opcode >= Instruction.T  && 
             (Instruction)opcode <= Instruction.NTA  ) {
          if ( gt.names[sy].IndexOf(' ') >= 0 || 
               !Char.IsLetter(gt.names[sy][0]) )
            name = "\"" + gt.names[sy] + "\"";
          else
            name = gt.names[sy];
          if (name.IndexOf('{') > -1) // prevent formatting problems in Errors.SynError
            name = name.Replace("{", "{{");
          if (name.IndexOf('}') > -1) // prevent formatting problems in Errors.SynError
            name = name.Replace("}", "}}");
          if (msg.Length + name.Length + 2 > 80) {
            msg.Append(" ...");
            break;
          } // if
          if (!nameInMsg) {
            nameInMsg = true;
            msg.Append("expected: " + name);
          } else {
            msg.Append(", ");
            msg.Append(name);
          } // else
        } // if
        adjPC = altPC;
      } // while
      if (!nameInMsg)
        msg.Append("syntax error");
      Errors.SynError(Lex.tokenLine, Lex.tokenCol, msg.ToString(), "");
      Triple(altRoot);
      while (newPC[Lex.token] == 0) {
        GetNextToken();      // may result in a call to StopParsing
        if (leaveOrEnter)
          return;
      } // while
      nwSP = newSP[Lex.token];
      leaveCnt = sp - nwSP;
      enterCnt = 0;
      Array.Copy(stk, stkAtErr, stk.Length); // save stack
    } else {                 // --- spurios error
      if (errDist == 0) {    // no token used since last error
        GetNextToken();      // may result in a call to StopParsing
        if (leaveOrEnter)
          return;
      } // if
      while (newPC[Lex.token] == 0) {
        GetNextToken();      // may result in a call to StopParsing
        if (leaveOrEnter) 
          return;
      } // while
      nwSP = newSP[Lex.token];
      eq = 2;                // compare stkAtErr and stk
      while (eq <= sp && eq <= nwSP && stkAtErr[eq - 1] == stk[eq - 1])
        eq++;
      eq--;                  // stacks are equal up to index eq
      leaveCnt = sp - eq;
      if (nwSP < eq) {
        leaveCnt = sp - nwSP;
        enterCnt = 0;
      } else if (nwSP > eq)
        enterCnt = nwSP - eq;
      else // nwSP == eq
        enterCnt = 0;
      Array.Copy(stkAtErr, stk, stk.Length); // restore stack
    } // else
    leaveOrEnter = (leaveCnt + enterCnt) > 0;
    sp = nwSP;
    pc = newPC[Lex.token];
    altRoot = pc;
    errDist = 0;
  } // HandleSynErr

  public static int Interpret() {
  //-----------------------------------|----------------------------------------
    int actionNr, opcode, currPC;
    for (;;) {
      opcode = gt.code[pc - 1];
      if ( !leaveOrEnter && mustRead && 
           (Instruction)opcode <= Instruction.EPSA ) {
        GetNextToken();
        mustRead = false;
        errDist++;
        altRoot = pc;
      } // if
      if (leaveOrEnter) {
        if (leaveCnt > 0) {
          leaveCnt--;
          actionNr = 0;
        } else { // enterCnt > 0
          enterCnt--;
          actionNr = gt.code[stkAtErr[sp - enterCnt - 1] - 2];
        } // else
        leaveOrEnter = (leaveCnt + enterCnt) > 0;
        return actionNr;
      } // if
      pc++;
      switch ((Instruction)opcode) {
        case Instruction.T:
          if (Lex.token == gt.code[pc - 1])
            if (Lex.token != EOFTOK) {
              pc++;
              mustRead = true;
            } else {
              return 0;
            } // else
          else
            HandleSynErr(ref pc, ref altRoot);
          break;
        case Instruction.TA:
          if (Lex.token == gt.code[pc - 1]) {
            pc += 3;
            mustRead = true;
          } else
            pc = AdrAt(pc + 1); // try alternative
          break;
        case Instruction.TC:
          if (Lex.token == gt.code[pc - 1]) {
            pc += 2;
            mustRead = true;
            actionNr = gt.code[pc - 2];
            return actionNr;
          } else
            HandleSynErr(ref pc, ref altRoot);
          break;
        case Instruction.TCA:
          if (Lex.token == gt.code[pc - 1]) {
            pc += 4;
            mustRead = true;
            actionNr = gt.code[pc - 2];
            return actionNr;
          } else
            pc = AdrAt(pc + 1); // try alternative
          break;
        case Instruction.NT:
          currPC = gt.code[pc - 1];
          if ( gt.nts[currPC].del || 
               Sets.member((ushort)Lex.token, gt.nts[currPC].firstSet) ) {
            pc++;
            actionNr = gt.code[pc - 1];
            Push(pc + 1);
            pc = gt.nts[currPC].startPC;
            altRoot = pc;
            return actionNr;
          } else
            HandleSynErr(ref pc, ref altRoot);
          break;
        case Instruction.NTA:
          currPC = gt.code[pc - 1];
          if (Sets.member((ushort)Lex.token, gt.nts[currPC].firstSet)) {
            pc += 3;
            actionNr = gt.code[pc - 1];
            Push(pc + 1);
            pc = gt.nts[currPC].startPC;
            altRoot = pc;
            return actionNr;
          } else
            pc = AdrAt(pc + 1);
          break;
        case Instruction.ANY:
          mustRead = true;
          break;
        case Instruction.ANYA:
          currPC = gt.code[pc - 1];
          if (Sets.member((ushort)Lex.token, gt.anySets[currPC - 1])) {
            pc += 3;
            mustRead = true;
          } else
            pc = AdrAt(pc + 1);
          break;
        case Instruction.EPS:
          currPC = gt.code[pc - 1];
          if (Sets.member((ushort)Lex.token, gt.epsSets[currPC - 1]))
            pc++;
          else
            HandleSynErr(ref pc, ref altRoot);
          break;
        case Instruction.EPSA:
          currPC = gt.code[pc - 1];
          if (Sets.member((ushort)Lex.token, gt.epsSets[currPC - 1]))
            pc += 3;
          else
            pc = AdrAt(pc + 1);
          break;
        case Instruction.JMP:
          pc = AdrAt(pc);
          break;
        case Instruction.RET:
          pc = Pop();
          altRoot = pc;
          return 0;
        default:
          if (opcode <= 128) {
  #if !CONTSEMACTS
          if (Errors.NumOfSynErrors() == 0)
  #endif
            return opcode - 12;
          } else // opcode > 128
            return opcode - 128;
          break;
      } // switch
    } // for
  } // Interpret


  public static bool Parse() {
  //-----------------------------------|----------------------------------------
    Lex.InitLex();
    sp           = 0;
    pc           = ROOTPC;
    altRoot      = pc;
    mustRead     = true;
    errDist      = MINERRDIST + 1;
    leaveOrEnter = false;
    leaveCnt     = 0;
    enterCnt     = 0;
    Sem.StartSem();
    return Errors.NumOfSynErrors() == 0;
  } // Parse


  public static void StopParsing() {
  //-----------------------------------|----------------------------------------
    leaveCnt     = sp + 1;
    enterCnt     = 0;
    leaveOrEnter = true;
  } // StopParsing

} // MiniCppSyn
 
// End of MiniCppSyn.cs
//=====================================|========================================